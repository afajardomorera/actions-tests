name: Process EKS deployment on DEV

on:
  issue_comment:
    types: [created]

  workflow_dispatch:
    inputs:
      deploymentCommand:
        type: string
        default: '/'
        required: true
      namespace:
        type: string
        default: ''
        required: true
      imagen:
        type: string
        default: LATEST
        required: false
env:
  PROCESS_TYPE: AUTO
  DEPLOYMENT_COMMAND: /deploy-EKS
  OPT_NAMESPACE: --ns
  NAMESPACE: DEFAULT_NAMESPACE
  OPT_ENTORNO: --env
  ENTORNO: DES
  OPT_IMAGE: --image
  IMAGE_TO_DEPLOY: DEFAULT_IMAGE
  RESPONSE_MESSAGE: 'Deployment Process In Progress'
  PROCESS_STATUS: OK
  HELM_INVOCATION_EVENT: 'SECRET - Nombre del evento que dispara el workflow definido en el repo de Helm'
  HELM_REPO: 'SECRET - Nombre del repositorio de Helm'
  HELM_ORG: 'SECRET - Nombre de la organizaciÃ³n a la que pertenece el repositorio indicado en HELM_REPO'
  SERVICE_TOKEN: 'SECRET - Token del usuario de servicio creado en HELM_REPO.'
  ECR_REPOSITORTY: ECR_REPO

jobs:
  process-deployment-command:
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    steps:
      - name: simula_precondicion_label_ready_for_deploy
        if: ${{ success() }}
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: READY_FOR_DEPLOY

      - id: previous_checks_passed
        name: previous_checks_validation
        if: "!contains(github.event.issue.labels.*.name, 'READY_FOR_DEPLOY')"
        run: |
          echo "RESPONSE_MESSAGE='The PR previous checks are still in progress or they have not finished successfully'" >> $GITHUB_ENV
          echo "PROCESS_STATUS=KO" >> $GITHUB_ENV          
    
      - name: process_manual_launch
        run: |-
          if ${{ github.event.inputs.namespace }}; then
            echo "DEPLOYMENT_COMMAND=${{ github.event.inputs.deploymentCommand }}" >> $GITHUB_ENV 
            echo "PROCESS_TYPE=MANUAL" >> $GITHUB_ENV
          fi
          if ${{ github.event.inputs.namespace }}; then
            echo "NAMESPACE=${{ github.event.inputs.namespace }}" >> $GITHUB_ENV 
          fi
          if ${{ github.event.inputs.imagen }}; then
            echo "IMAGE_TO_DEPLOY=${{ github.event.inputs.imagen }}" >> $GITHUB_ENV 
          fi
    
      - uses: jungwinter/split@v2
        id: split
        name: split_deployment_comment
        if: env.PROCESS_TYPE == 'AUTO' && env.PROCESS_STATUS == 'OK' && ${{ github.event.comment.body }}
        with:
          msg: ${{ github.event.comment.body }}
      
      - id: AUTO_show_comment_elements
        name: show_comment_elements
        if: env.PROCESS_TYPE == 'AUTO' && env.PROCESS_STATUS == 'OK'
        run: |
          echo "Process status: " $PROCESS_STATUS
          echo "Deployment Command: " ${{ steps.split.outputs._0 }}
          echo "DEPLOYMENT_COMMAND=${{ steps.split.outputs._0 }}" >> $GITHUB_ENV
          echo "Namespace option: " ${{ steps.split.outputs._1 }}
          echo "OPT_NAMESPACE=${{ steps.split.outputs._1 }}" >> $GITHUB_ENV
          echo "Target Namespace for deployment: " ${{ steps.split.outputs._2 }}
          echo "NAMESPACE=${{ steps.split.outputs._2 }}" >> $GITHUB_ENV
          echo "Environment option: " ${{ steps.split.outputs._3 }}
          echo "OPT_ENTORNO=${{ steps.split.outputs._3 }}" >> $GITHUB_ENV
          echo "Target environment for deployment: " ${{ steps.split.outputs._4 }}
          echo "ENTORNO=${{ steps.split.outputs._4 }}" >> $GITHUB_ENV
          echo "Image option: " ${{ steps.split.outputs._5 }}
          echo "OPT_IMAGE=${{ steps.split.outputs._5 }}" >> $GITHUB_ENV
          echo "Image for deployment: " ${{ steps.split.outputs._6 }}
          echo "IMAGE_TO_DEPLOY=${{ steps.split.outputs._6 }}" >> $GITHUB_ENV
          echo "Deployment Command: " $DEPLOYMENT_COMMAND
          echo "Target Namespace for deployment: " $NAMESPACE
          echo "Target environment for deployment: " $ENTORNO
          echo "Image for deployment: " $IMAGE_TO_DEPLOY
      
      - id: MANUAL_show_comment_elements
        name: show_comment_elements
        if: env.PROCESS_TYPE == 'MANUAL' && env.PROCESS_STATUS == 'OK'
        run: |
          echo "Process status: " $PROCESS_STATUS
          echo "Deployment Command: " $DEPLOYMENT_COMMAND
          echo "Target Namespace for deployment: " $NAMESPACE
          echo "Target environment for deployment: " $ENTORNO
          echo "Image for deployment: " $IMAGE_TO_DEPLOY
      
      - id: validate_deployment_command
        name: validate_deployment_command
        if: env.PROCESS_STATUS == 'OK' && env.DEPLOYMENT_COMMAND != '/deploy-EKS'
        run: |
          echo "RESPONSE_MESSAGE='The added comment is not a valid EKS deployment command'" >> $GITHUB_ENV
          echo "PROCESS_STATUS=KO" >> $GITHUB_ENV          
      
      - id: process_comment_values_with_image
        name: process_comment_values_with_image
        if: env.PROCESS_STATUS == 'OK' && env.OPT_NAMESPACE == '--ns' && env.OPT_ENTORNO == '--env' && env.OPT_IMAGE_TO_DEPLOY == '--image' && env.IMAGE_TO_DEPLOY != null
        run: |
          echo "NAMESPACE=${{ steps.split.outputs._2 }}" >> $GITHUB_ENV
          echo "ENTORNO=${{ steps.split.outputs._4 }}" >> $GITHUB_ENV
          echo "IMAGE_TO_DEPLOY=${{ steps.split.outputs._6 }}" >> $GITHUB_ENV
      
      - id: process_comment_values_without_image
        name: process_comment_values_without_image
        if: env.PROCESS_STATUS == 'OK' && env.OPT_NAMESPACE == '--ns' && env.OPT_ENTORNO == '--env' && env.OPT_IMAGE_TO_DEPLOY == '--image'
        run: |
          echo "NAMESPACE=${{ steps.split.outputs._2 }}" >> $GITHUB_ENV
          echo "ENTORNO=${{ steps.split.outputs._4 }}" >> $GITHUB_ENV
          echo "IMAGE_TO_DEPLOY=LATEST" >> $GITHUB_ENV
      
      - id: validate_deployment_command_namespace
        name: validate_deployment_command_namespace
        if: env.PROCESS_STATUS == 'OK' && env.NAMESPACE == 'DEFAULT_NAMESPACE'
        run: |
          echo "RESPONSE_MESSAGE=Namespace not informed" >> $GITHUB_ENV
          echo "PROCESS_STATUS=KO" >> $GITHUB_ENV
      
      - id: validate_deployment_command_environment
        name: validate_deployment_command_environment
        if: env.PROCESS_STATUS == 'OK' && env.ENTORNO != 'DES'
        run: |
          echo "RESPONSE_MESSAGE=Environment not informed or its value is not DES" >> $GITHUB_ENV
          echo "PROCESS_STATUS=KO" >> $GITHUB_ENV
      
      - id: validate_deployment_command_image
        name: validate_deployment_command_image
        if: env.PROCESS_STATUS == 'OK' && env.IMAGE_TO_DEPLOY == 'DEFAULT_IMAGE'
        run: |
          echo "RESPONSE_MESSAGE=The --image option has been informed but without value" >> $GITHUB_ENV
          echo "PROCESS_STATUS=KO" >> $GITHUB_ENV

      - id: add_process_message
        name: add_process_message
        uses: actions/github-script@v4
        with:
          script: |
            github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.RESPONSE_MESSAGE,
            }); 
