name: CICD Comment & Notify

on:
  issue_comment:
    types: [created]
    
env:
  MY_ACCOUNT: DEFAULT_ACCOUNT
  MY_ENV: DEFAULT_ENV
  MY_IMAGE: image:latest
  FINAL_MESSAGE: DEFAULT_MESSAGE

jobs:
  get-comment-and-notify:
    env:
        REPO_TOKEN: ${{ secrets.REPO_TEST }}
        EVENT: test_result
        ORG: tutantest
        REPO: action_event_test
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    steps:
      - name: Wait for other checks to succeed
        uses: lewagon/wait-on-check-action@v1.0.0
        with:
          ref: ${{ github.ref }}
          running-workflow-name: 'CICD Comment & Notify'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 5
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: ${{ github.event.comment.body }}
      - id: show_comment_elements
        name: show_comment_elements
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          PULL_REQUEST_INFO: ${{ toJSON(github.event.pull_request) }}
        run: |
          echo "GH_CONTEXT: " $GITHUB_CONTEXT
          echo "PR_INFO: " $PULL_REQUEST_INFO
          echo "0: " ${{ steps.split.outputs._0 }}
          echo "1: " ${{ steps.split.outputs._1 }}
          echo "2: " ${{ steps.split.outputs._2 }}
          echo "3: " ${{ steps.split.outputs._3 }}
          echo "4: " ${{ steps.split.outputs._4 }}
          echo "5: " ${{ steps.split.outputs._4 }}
          echo "6: " ${{ steps.split.outputs._4 }}
      - id: get_env_and_image
        name: get_env_and_image
        if: steps.split.outputs._0 == '/deploy' && steps.split.outputs._1 == '--account' && steps.split.outputs._3 == '--env' && steps.split.outputs._5 == '--image' && steps.split.outputs._4 != null
        run: |
          echo "STATUS: " $LATEST_IMAGE
          export LATEST_IMAGE=false
          echo "COMMENT: " ${{ github.event.comment.body }}
          export MY_ACCOUNT=${{ steps.split.outputs._2 }}
          echo "CUENTA: " $MY_ACCOUNT
          export MY_ENV=${{ steps.split.outputs._4 }}
          echo "ENTORNO: " $MY_ENV
          export MY_IMAGE=${{ steps.split.outputs._6 }}
          echo "IMAGEN: " $MY_IMAGE
#           curl -d "{\"event_type\": \"test_result\", \"client_payload\":{\"account\":\"$MY_ACCOUNT\",\"environment\":\"$MY_ENV\",\"image\":\"$MY_IMAGE\"}}" -H "Content-Type:application/json" -H "Authorization:token $REPO_TOKEN" -H "Accept:application/vnd.github.everest-preview+json" "https://api.github.com/repos/$ORG/$REPO/dispatches"
      - id: get_env_and_latest_image
        name: get_env_and_latest_image
        if: steps.split.outputs._0 == '/deploy' && steps.split.outputs._1 == '--account' && steps.split.outputs._3 == '--env' && steps.split.outputs._5 != '--image'
        run: |
          echo "STATUS: " $LATEST_IMAGE
          echo "COMMENT: " ${{ github.event.comment.body }}
          export MY_ACCOUNT=${{ steps.split.outputs._2 }}
          echo "CUENTA: " $MY_ACCOUNT
          export MY_ENV=${{ steps.split.outputs._2 }}
          echo "ENTORNO: " $MY_ENV
          echo "IMAGEN: " $MY_IMAGE  
#           curl -d "{\"event_type\": \"test_result\", \"client_payload\":{\"account\":\"$MY_ACCOUNT\",\"environment\":\"$MY_ENV\",\"image\":\"$MY_IMAGE\"}}" -H "Content-Type:application/json" -H "Authorization:token $REPO_TOKEN" -H "Accept:application/vnd.github.everest-preview+json" "https://api.github.com/repos/$ORG/$REPO/dispatches"
#       - name: Fail randomly
#         run: |
#           ls
#           exit $((RANDOM % 2))        
#       - name: Message success
#         if: ${{ success() }}
#         uses: actions/github-script@v4
#         with:
#           script: |
#             process.env.FINAL_MESSAGE='Deployment succeeded! ✅';
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: process.env.FINAL_MESSAGE,
#             });          
#       - name: Message failure
#         if: ${{ failure() }}
#         uses: actions/github-script@v4
#         with:
#           script: |
#             process.env.FINAL_MESSAGE='Deployment failed! ❌';
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: process.env.FINAL_MESSAGE,
#               }); 
